<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Golang之profiler和trace工具]]></title>
      <url>%2F2017%2F03%2F22%2FGolang%E4%B9%8Bprofiler%E5%92%8Ctrace%E5%B7%A5%E5%85%B7%2F</url>
      <content type="text"><![CDATA[Golang 之profiler和trace工具在生成环境中使用Golang需要很多优化，才能满足性能需求，通常优化点在于CPU占用。Golang提供了丰富的工具，包括内置的profiler和trace工具，来帮助我们完成任务。 一、 Profiler Golang自带了profiler工具，即为C++中的gperftools包。而且提供api和http两种接口。实际项目中http接口更为方便，下面以http接口为例说明： 在golang程序中，开启profiler接口123456func main() &#123;go func() &#123; log.Println(http.ListenAndServe(&quot;:5567&quot;, nil))&#125;() //other program code&#125; 嵌入以上代码，即可在编译生成的二进制程序中打开profiler的http接口。 可以通过浏览器查看profiler数据http://127.0.0.1:5567/debug/pprof/ 同时也可以通过命令行来查看cpu占用go tool pprof http://127.0.0.1:5567/debug/pprof/profile 命令行还可以图形化显示cpu占用拓扑图。鉴于开发机没有安装X环境，暂不详述通过找出cpu占用top10的函数，来不断优化性能。 二、FlameGraph uber开源了一个工具，可以十分方便地查询profiler数据生成火焰图，如此优化性能更为直观。首先需要安装工具：go get github.com/uber/go-torchgo get github.com/tools/godepgodep restoregit clone https://github.com/brendangregg/FlameGraph.git 上述操作需要设置正确的PATH来执行godep,go-torch,flamegraph.pl执行：go-torch –time=15 –file “torch.svg” –url http://127.0.0.1:5567上述命令会收集http://127.0.0.1:5567/debug/pprof/profile 的数据，并调用flamegraph绘制torch.svg火焰图。如下： 三、Trace 首先需要收集二进制的trace数据。curl 127.0.0.1:5567/debug/pprof/trace?seconds=10 trace.data上述命令收集10秒的trace保存在本地的trace.data文件中，该文件是二进制的。 其次需要将二进制的trace数据转换为json格式。执行go tool trace -http=’:8888’ golang_server trace.data 其中golang_server是127.0.0.1:5567对应的二进制golang程序，trace.data是上述抓取的二进制数据。新开终端，执行curl 127.0.0.1:8888/jsontrace trace.json将前一步的trace.data转换层trace.json格式。 再次将trace.json转换为html格式。到https://github.com/catapult-project/catapult/tree/master/tracing下载trace-viewer工具，执行./trace2html ~/trace/trace.json生成trace.html文件，使用浏览器打开，如下。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[My New Post]]></title>
      <url>%2F2017%2F03%2F22%2FMy-New-Post%2F</url>
      <content type="text"><![CDATA[Mac上安装Node和NPMbrew安装node 首先更新brew，使其在最新版本，代码如下：$ brew update 确保brew是安全可靠的，代码如下：$ brew doctor 将brew的位置添加到$PATH环境变量中，并保存bash或者profile文件；$ export PATH=”/usr/local/bin:$PATH” 当处理完上述问题后，来处理brew和node关系清理brew的link$ brew cleanup 删除node文件，完全卸载node和npmsudo rm -rf/usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm,node,man1/node*} 或者是sudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node*/usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/nodeopt/local/include/node /opt/local/lib/node_modules 或者是下面这样：(1).在/usr/local/lib目录下，删除任何与node和 node_modules有关的目录；(2).在/usr/local/include 目录下，删除任何与node 和 node_modules有关的目录；(3).如果你是通过brew install node安装的node，则在终端执行brew uninstallnode ，并在home目录下查找 local 或lib 或include文件夹，删除任何与node 和 node_modules有关的目录；(4).在/usr/local/bin目录下，删除任何与 node 执行文件；(5).最后下载 nvm，跟随它的介绍安装node。当然，你也可以通过npm来安装最新版本的Node。 通过brew安装node和npmbrew install node npm 测试Node和npm安装是否成功，安装Gruntnpm install -g grunt-cli如果安装成功，那么恭喜你node，npm，grunt均安装成功。若出现问题，请回顾前面内容。 参考1：http://www.jianshu.com/p/20ea93641bda参考2：http://www.jianshu.com/p/3baed1d862ce]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F21%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
